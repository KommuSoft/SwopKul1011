package projectswop20102011.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import projectswop20102011.domain.validators.DispatchUnitsConstraint;
import projectswop20102011.exceptions.InvalidEmergencyException;
import projectswop20102011.exceptions.InvalidEmergencyStatusException;

public interface Sendable {

	/**
	 * Returns the location of this emergency.
	 * @return The location of this emergency.
	 */
	public GPSCoordinate getLocation();

	/**
	 * Returns the severity of this emergency.
	 * @return The severity of this emergency.
	 */
	public EmergencySeverity getSeverity();

	/**
	 * Returns the status of this emergency.
	 * @return The status of this emergency.
	 */
	public EmergencyStatus getStatus();

	/**
	 * Returns the description of this emergency.
	 * @return The description of this emergency.
	 */
	public String getDescription();

	/**
	 * Assigning units to this emergency.
	 * @param units
	 *      A list of units to assign.
	 * @throws InvalidEmergencyStatusException
	 *      If the status of this emergency does not allow this action.
	 * @throws Exception
	 *      If another exception is thrown by performing this operation (for instance those units are already assigned).
	 */
	public void assignUnits(Set<Unit> units) throws InvalidEmergencyStatusException, InvalidEmergencyException;

	/**
	 * Returns a hashtable that contains the information of this emergency.
	 * This hashtable contains the id, location, severity, status and the working units.
	 * @return A hashtable that contains the information of this emergency.
	 */
	public Hashtable<String, String> getShortInformation();

	/**
	 * Returns a hashtable that contains the information of this emergency.
	 * This hashtable contains the id, type, location, severity, status, the working units and specific elements of the child of this emergency.
	 * @return A hashtable that contains the information of this emergency.
	 */
	public abstract Hashtable<String, String> getLongInformation();

	/**
	 * Returns a list of units currently working at this emergency.
	 * @return a list of units currently working at this emergency.
	 */
	public ArrayList<Unit> getWorkingUnits();

	/**
	 * Checks if the given unit can assign the given list of units to the emergency.
	 * @param units
	 *      A list of units to check.
	 * @return True if the given list of units can be assigned, otherwise false.
	 */
	public boolean canAssignUnits(Set<Unit> units);

	/**
	 * Returns a proposal generated by the policy of this constraint.
	 * @param availableUnits
	 *      A list of units that are available for the proposal.
	 * @return A list of units proposed by the policy of this constraint.
	 */
	public Set<Unit> getPolicyProposal(List<? extends Unit> availableUnits);

	/**
	 * Returns the policy for allocation used by this emergency.
	 * @return The policy for allocation used by this emergency.
	 */
	public DispatchPolicy getDispatchPolicy();

	/**
	 * Returns the constraint representing what conditions need to be met before the emergency can be finished.
	 * @return A DispatchUnitsConstraint representing the constraints to finish an emergency.
	 */
	public DispatchUnitsConstraint getDispatchConstraint();

	/**
	 * Checks if this emergency can be resolved with a given collection of all available units.
	 * @param availableUnits
	 *		All the available units in the world.
	 * @return True if the given emergency can be resolved, otherwise false.
	 */
	public boolean canBeResolved(Collection<Unit> availableUnits);
	/**
	 * Tests if this emergency is partially assigned.
	 * @return True if this emergency is partially assigned, otherwise false.
	 */
	public boolean isPartiallyAssigned();

}
